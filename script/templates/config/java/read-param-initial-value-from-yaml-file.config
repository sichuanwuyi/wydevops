#定一个Map类型变量,其中Key用于配置需要从Java项目的Application(-prod).yaml文件中读取的所有参数和其起效条件，
#其中Value用于存储对应的需要赋值的目标参数路径。具体定义如下：
#1. Map中的Key是需要从application(-prod).yaml文件中读取的条件和/或来源参数，
#条件间、条件和参数间使用英文分号（";"）隔开；多个条件间是“与”的关系；
#条件串定义在来源参数串的前面；条件串格式为：{条件参数路径}={正则表达式或值串};
#例如下面_javaYamlParamMap参数的最后一项。
#来源参数串是一个参数路径字符串。
#2. Map中的Value为需要设置的在_ci-cd-config.yaml文件中的目标参数串。目标参数串使用英文分号（";"）隔开。
#目标参数串中“|”前的为目标参数路径串，“|”后面的为默认值，当读取来源参数失败时会使用默认值。
#当来源参数读取失败且目标参数未设置默认值时，则程序报错退出。
#3. 最终目标：需要将Key中来源参数的值赋值给指定的一个或多个目标参数。

#定义读取来源参数失败后是否报错退出
#true——表示“|”前的Map对象中来源参数读取失败时要报错退出。
#false——表示“|”前的Map对象中来源参数读取失败时不报错退出，仅给出警告信息。
define.exitOnError="false"
#定义本文件中参数来源的文件列表
define.bindingFiles="./src/main/resources/config/application-prod.yml ./src/main/resources/config/application.yml"

#以下定义了需要从define.binding.files文件列表中提取的参数路径信息，
#并指定了这些参数的值需要赋值给ci-cd.yaml文件中的哪些参数
#项目网关路由路径，读取失败后设置为空
url-prefix="globalParams.gatewayPath|/\${serviceName}"
#项目需要开放的端口，读取失败后设置为8080
server.port="globalParams.mainPort|8080;globalParams.containerPorts|8080;globalParams.servicePorts|8080"
#项目是否使能K8S探活和就绪探针
#特殊格式：第一个分号前的配置（management.endpoints.web.exposure.include=*;）是前置条件。
# shellcheck disable=SC2034
management.endpoints.web.exposure.include=*;management.endpoints.enabled-by-default="globalParams.livenessProbeEnable|false;globalParams.readinessProbeEnable|false"
