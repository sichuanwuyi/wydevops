#再定一个Map类型变量,其中Key用于配置需要从Java项目的Pom.yaml文件properties配置中读取的所有参数，
#其中Value用于存储对应的需要赋值的目标参数路径。具体定义类似gJavaApplicationParamMap的定义，有如下区别：
#1. 来源参数中“|”后面的为读取方式类型；1表示按中文内容方式读取。没有“|”则按标准XML Path方式读取。
#2. Map的Value值格式为："{目标参数}|{默认值};..."。其中默认值允许包含"${变量名}"样式的变量引用，
#   其中的”变量名“只能是_ci-cd-config.yaml文件templates下的属性名。
#3. 当来源参数读取失败且目标参数未设置默认值时，则程序不会退出。

#定义读取来源参数失败后是否报错退出
#true——表示“|”前的Map对象中来源参数读取失败时要报错退出。
#false——表示“|”前的Map对象中来源参数读取失败时不报错退出，仅给出警告信息。
define.exitOnError="false"
#定义本文件中参数来源的文件列表
define.bindingFiles="./pom.xml"

#以下定义了需要从define.binding.files文件列表中提取的参数路径信息，
#并指定了这些参数的值需要赋值给ci-cd.yaml文件中的哪些参数
#项目的服务名称，也即jar包的名称。
project.artifactId="globalParams.serviceName;globalParams.serviceCode"
#项目的版本，也即业务镜像的版本。
project.version="globalParams.businessVersion"
#项目的中文名称,采用读取方式1进行读取。
project.properties.cicdName|1="globalParams.name"
#项目的英文名称
project.properties.cicdNameEn="globalParams.nameEn"
#双镜像模式下使用的应用基础镜像的名称，读取失败后采用默认值${serviceName}-base填充。
project.properties.cicdBaseImage="globalParams.baseImage|\${serviceName}-base"
#双镜像模式下使用的应用基础镜像的版本，读取失败后采用默认值${businessVersion}-base填充。
project.properties.cicdBaseVersion="globalParams.baseVersion|\${businessVersion}"
#在制作应用基础镜像(在双镜像模式下)时，或在单镜像模式下打包时，Dockerfile文件中FROM参数使用的镜像
project.properties.cicdBaseFromImage="globalParams.baseFromImage|openjdk:11.0-jre"
#指定构建类型(全部小写)：
# single：单镜像模式：构建单一的应用镜像
# double：双镜像模式：构建应用基础镜像和应用业务镜像
# base：仅构建“应用基础镜像”
# business：仅构建“应用业务镜像”
# thirdParty: 打包第三方镜像：拉取第三方镜像，缓存到本地镜像缓存目录中，然后推送到私库中，最后导出到gDockerBuildOutDir目录中。
# customize: 自定义模式，指定docker构建目录后由本脚本自动完成构建。
#读取失败后采用默认值single填充。
project.properties.cicdBuildType="globalParams.buildType|single"
#制作docker镜像时需要指定的架构，读取失败后采用默认值”linux/amd64,linux/arm64“填充。
project.properties.cicdArchTypes="globalParams.archTypes|linux/amd64,linux/arm64"
project.properties.cicdUseTemplate="globalParams.useTemplate|false"
#用于控制构建时需要执行的构建阶段
# shellcheck disable=SC2034
project.properties.cicdValidBuildStages="globalParams.validBuildStages"

