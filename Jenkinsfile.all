pipeline {
  agent { label "${AGENT_LABEL}"}
  environment {
        AGENT_LABEL = 'maven1'
        JENKINS_SCRIPT = '${BUILD_SCRIPT_ROOT}/wydevops.sh'
        //此处填入在Jenkins中创建的凭据的ID
        GIT_USER_ID = '1'
  }

  parameters {
      string(name: 'GIT_PROJECT_NAME', defaultValue: 'java-sample', description: 'gitee仓库名')
      //GIT_GROUP的取值由Gitee仓库决定。
      choice(name: 'GIT_GROUP', choices: ['tmt_china'], description: 'checkout git group')
      choice(name: 'GIT_BRANCH', choices: ['master', 'develop'], description: 'checkout git branch')
      choice(name: 'PROJECT_LANGUAGE', choices: ['java', 'golang', 'c++', 'python', 'shell', 'vue'], description: '')
      choice(name: 'ARCH_TYPES', choices: ['undefine', 'linux/amd64,linux/arm64', 'linux/amd64', 'linux/arm64'], description: '架构类型')
      choice(name: 'BUILD_TYPE', choices: ['single', 'double', 'base', 'business'], description: '构建类型')
      //AGENT_LABEL取值由Jenkins各节点的标签决定。
      string(name: 'AGENT_LABEL', defaultValue: 'maven1', description: 'agent label')
      string(name: 'BUILD_PATH', defaultValue: './', description: '执行编译的路径')
  }

  stages {
    stage('Checkout') {
        options {
            timeout(time: 2, unit: 'MINUTES')
        }
        steps {
            dir("${GIT_PROJECT_NAME}") {
                echo "----Checkout----"
                git credentialsId: "${GIT_USER_ID}", url: "https://gitee.com/${GIT_GROUP}/${GIT_PROJECT_NAME}.git", branch: "${GIT_BRANCH}".split("/")[-1]
            }
            script{
                currentBuild.result = 'SUCCESS'
                echo "${PROJECT_LANGUAGE}"
            }
        }
    }

    stage('Build') {
      when {
        allOf{
            expression {currentBuild.result == 'SUCCESS'}
        }
      }
      steps {
        dir("${GIT_PROJECT_NAME}") {
          script {
            catchError {
              echo "Build with ${JENKINS_SCRIPT} ${PROJECT_LANGUAGE}"
                sh "${JENKINS_SCRIPT} -c -e -d -m -S 'build' -L ${PROJECT_LANGUAGE} -P ${BUILD_PATH} -B ${BUILD_TYPE} -A ${ARCH_TYPES} -M 'jenkins'"
              }
            }
        }
        script{
            currentBuild.result = 'SUCCESS'
            echo "Build completed"
        }
      }
    }

    stage('Docker') {
      when {
        allOf{
            expression {currentBuild.result == 'SUCCESS'}
        }
      }
      steps {
        dir("${GIT_PROJECT_NAME}") {
            script {
                catchError {
                    sh "${JENKINS_SCRIPT} -e -d -m -S 'docker' -L ${PROJECT_LANGUAGE} -P ${BUILD_PATH} -B ${BUILD_TYPE} -A ${ARCH_TYPES} -M 'jenkins'"
                }
                echo 'finish creating docker images'
                currentBuild.result = 'SUCCESS'
            }
        }
      }
    }

    stage('Chart') {
     when {
          allOf{
              expression {currentBuild.result == 'SUCCESS'}
          }
      }
      steps {
          dir("${GIT_PROJECT_NAME}") {
              script {
                  catchError {
                      sh "${JENKINS_SCRIPT} -e -d -m -S 'chart' -L ${PROJECT_LANGUAGE} -P ${BUILD_PATH} -B ${BUILD_TYPE} -A ${ARCH_TYPES} -M 'jenkins'"
                  }
                  echo 'finish creating chart image'
                  currentBuild.result = 'SUCCESS'
              }
          }
      }
    }

    stage('Package') {
        when {
          allOf{
              expression {currentBuild.result == 'SUCCESS'}
          }
        }
        steps {
          dir("${GIT_PROJECT_NAME}") {
              script {
                  catchError {
                      sh "${JENKINS_SCRIPT} -e -d -m -S 'package' -L ${PROJECT_LANGUAGE} -P ${BUILD_PATH} -B ${BUILD_TYPE} -A ${ARCH_TYPES} -M 'jenkins'"
                  }
                  echo 'finish creating offline package'
                  currentBuild.result = 'SUCCESS'
              }
          }
        }
    }

    stage('Deploy') {
      when {
        allOf{
            expression {currentBuild.result == 'SUCCESS'}
          }
      }
      steps {
        echo "Start deploy application ...${GIT_PROJECT_NAME}"
        dir("${GIT_PROJECT_NAME}") {
            script {
                catchError {
                    sh "${JENKINS_SCRIPT} -e -d -m -S 'deploy' -L ${PROJECT_LANGUAGE} -P ${BUILD_PATH} -B ${BUILD_TYPE} -A ${ARCH_TYPES} -M 'jenkins'"
                }
                echo 'Deploy completed'
            }
        }
      }
    }
  }
}